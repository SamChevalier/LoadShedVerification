CREATE_DATAFILE.jl
    # Hyperparams
    alpha_min = 0.25
    alpha_max = 0.85
    perturb_percent = 0.50

GUROBI_SOLVE_DATAFILE.jl
    # MIPGap percent to use in Gurobi
    mip_gap = 0.01

    # Which PowerModels solving function did we use (line 51)
    solve = solve_ops

MODEL_GEN.PY
    epochs = 150

    hidden_dim_depth = 
        32:
            Total Accuracy Average: 12.9825
            Branchwise Accuracy Average: 85.3370
        128:
            Total Accuracy Average: 12.2807
            Branchwise Accuracy Average: 88.1348
        512: 
            Total Accuracy Average: 13.6842
            Branchwise Accuracy Average: 86.4543
        2048:
            Total Accuracy Average: 15.7895
            Branchwise Accuracy Average: 87.9963

    batch_sizes = 5
    
    dropout_percent = 0.2
    
    learn_rate = 1e-4
    
    percent_train = 0.8
    percent_val = 0.1
    percent_test = 0.1
    
    # order of flattened input vector
    [power_risk, qd, pd, alpha]

    Sequential(Linear(input_dim, hidden_dim_depth),
               ReLU(),
               Dropout(dropout_percent),
               Linear(hidden_dim_depth, hidden_dim_depth),
               ReLU(),
               Dropout(dropout_percent),
               Linear(hidden_dim_depth, hidden_dim_depth),
               ReLU(),
               Dropout(dropout_percent),
               Linear(hidden_dim_depth, num_branches))
    
    # input data normalization
    mean = torch.mean(torch.stack(x_sample_temp), dim=0)
    std = torch.std(torch.stack(x_sample_temp), dim=0) + 1e-6
    x_sample_temp = [(x - mean) / std for x in x_sample_temp]
